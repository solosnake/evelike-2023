#ifdef __linux__
#define GL_GLEXT_PROTOTYPES
#include <GL/glx.h> /* this includes the necessary X headers */
#include <GL/gl.h>
#include <GL/glext.h>
#include <GL/glxext.h>
#endif

#ifdef SS_OS_WINDOWS
#   include "solosnake/opengl.hpp"
#endif

#ifndef SS_OS_WINDOWS
#   ifndef APIENTRY
#       define APIENTRY
#   endif
#endif


#include "solosnake/opengl_debug_output.hpp"
#include "solosnake/logging.hpp"

#define SS_GL_DEBUG_OUTPUT              (0x92E0)
#define SS_GL_DEBUG_SEVERITY_HIGH_ARB   (0x9146)
#define SS_GL_DEBUG_SEVERITY_MEDIUM_ARB (0x9147)
#define SS_GL_DEBUG_SEVERITY_LOW_ARB    (0x9148)

namespace solosnake
{
    //      Debug Output Message Source           Messages Generated by
    //      ---------------------------           ---------------------
    //      DEBUG_SOURCE_API_ARB                  The GL
    //
    //      DEBUG_SOURCE_SHADER_COMPILER_ARB      The GLSL shader compiler or compilers for other extension-provided languages
    //
    //      DEBUG_SOURCE_WINDOW_SYSTEM_ARB        The window system, such as WGL or GLX
    //
    //      DEBUG_SOURCE_THIRD_PARTY_ARB          External debuggers or third-party middleware libraries
    //
    //      DEBUG_SOURCE_APPLICATION_ARB          The application
    //
    //      DEBUG_SOURCE_OTHER_ARB                Sources that do not fit to any of the ones listed above
    //
    //      ----------------------------------------------------------------------------
    //      Table 5.3: Sources of debug output messages.  Each message must originate
    //      from a source listed in this table.
    //
    //
    //      Debug Output Message Type               Informs about
    //      -------------------------               -------------
    //      DEBUG_TYPE_ERROR_ARB                    Events that generated an error
    //
    //      DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB      Behavior that has been marked for deprecation
    //
    //      DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB       Behavior that is undefined according to the specification
    //
    //      DEBUG_TYPE_PERFORMANCE_ARB              Implementation-dependent performance warnings
    //
    //      DEBUG_TYPE_PORTABILITY_ARB              Use of extensions or shaders in a way that is highly vendor-specific
    //
    //      DEBUG_TYPE_OTHER_ARB                    Types of events that do not fit any of the ones listed above
    //
    //      Severity Level Token & Suggested examples of messages
    //      -----------------------------------------------------
    //
    //      DEBUG_SEVERITY_HIGH_ARB
    //      Any GL error; dangerous undefined behavior; any GLSL or ARB shader compiler and linker errors;
    //
    //      DEBUG_SEVERITY_MEDIUM_ARB
    //      Severe performance warnings; GLSL or other shader compiler and linker warnings; use of currently deprecated behavior
    //
    //      DEBUG_SEVERITY_LOW_ARB
    //      Performance warnings from redundant state changes; trivial undefined behavior


    //! Callback logging function which can be registered with OpenGL through
    //! the glDebugMessageCallback(ARB) method.
    static void APIENTRY opengl_dbg_message(
        GLenum ,  // source
        GLenum ,  // type
        GLuint ,  // id
        GLenum severity,
        GLsizei , // length
        const GLchar* message,
        void*     // userParam
        )
    {
        if( SS_GL_DEBUG_SEVERITY_HIGH_ARB == severity )
        {
            ss_err( "OpenGL: ", message );
        }
        else if( SS_GL_DEBUG_SEVERITY_MEDIUM_ARB == severity )
        {
            ss_wrn( "OpenGL: ", message );
        }
        else
        {
            ss_log( "OpenGL: ", message );
        }
    }

    typedef void( APIENTRY* callback_t )( GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar*, void* );

    typedef void( APIENTRY* debugMessageCallbackARB_t )( callback_t, void* );

    bool enable_opengl_debugging( bool enabled )
    {

#ifdef SS_OS_LINUX
        debugMessageCallbackARB_t debugMessageCallbackARB
            = ( debugMessageCallbackARB_t )glXGetProcAddress( ( const GLubyte* )"glDebugMessageCallbackARB" );
#endif

#ifdef SS_OS_WINDOWS
        debugMessageCallbackARB_t debugMessageCallbackARB
            = ( debugMessageCallbackARB_t )::wglGetProcAddress( "glDebugMessageCallbackARB" );
#endif

        if( debugMessageCallbackARB )
        {
            if( enabled )
            {
                debugMessageCallbackARB( opengl_dbg_message, nullptr );
                glEnable( SS_GL_DEBUG_OUTPUT );
                ss_log( "OpenGL Debug Output logging enabled: this may impact performance." );
            }
            else
            {
                glDisable( SS_GL_DEBUG_OUTPUT );
                debugMessageCallbackARB( nullptr, nullptr );
                ss_log( "OpenGL Debug Output logging disabled." );
            }
        }
        else
        {
            if( enabled )
            {
                ss_wrn( "OpenGL Debug Output logging function "
                        "'glDebugMessageCallbackARB' not found - logging cannot be enabled." );
            }
        }

        return debugMessageCallbackARB != nullptr;
    }
}
