assert( [3] == 0 ) // Check initialisation to zero
0
0x0000 0x0000 0x0000 0x0000 // Test asm
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
assert( !0 )
assert( 1 )
[2] += 1    // 1
[2] *= 8    // 8
[2] -= 2    // 6
[2] /= 3    // 2
assert( [2] == 2 )
[2] %= 2    // 0
[2] |= 255  // 255 0xFF
[2] &= 240  // 240 0xF0
assert( [2] == 240 )
[2] ^= 255  // 15
assert( [2] == 15 )
[3] = [2] > 14
assert( [3] )
[3] = [2] < 16
assert( [3] )
[3] = [2] >= 15
assert( [3] )
[3] = [2] <= 15
assert( [3] )
[3] = [2] <= 10
assert( ! [3] )
[2] = 1
[2] = [2] << 4
assert( [2] == 16 )
[2] = [2] >> 2
assert( [2] == 4 )
[3] = [2] == [2]
assert( [3] == 1 )
[3] = [2] != [2]
assert( [3] == 0 )
[2] = 0
[3] = 1
[4] = [2] || [3]
assert( [4] )
[4] = [2] && [3] 
assert( ! [4] )
[4] = [2] == [2]
assert( [4] )
[4] = [2] != [3]
assert( [4] )
turn( 1, 2 )    // CW
synch( 100 )
turn( 0, 3 )    // CCW
[5] = get_location()
print( [5] )
advance( 2 )
turn( 1, 1 )
[6] = get_distance_to([5])
assert( [6] == 2 )
assert( [6]!=[5] )
[6] = get_cw_turn_count_to([5])
turn_cw( [6] )
advance( 2 )
[6] = get_location()
assert( [6] == [5] )
goto 80
print( "NOISE" )
clear_msgs()
[2] = get_msgs_count()
assert( [2] == 0 )
broadcast( 1, 79, 1 )   // We should receive this broadcast
[2] = get_msgs_count()
assert( [2] == 1 )
[2] = get_msgbuf_line_count()
assert( [2] == 0 )
move_msg_to_msgbuf( 0 )
[2] = get_msgs_count()
assert( [2] == 0 )
[2] = get_msgbuf_line_count()
assert( [2] == 1 )
copy_code_from_msgbuf( 0, 10, 1 )
[2] = compare_line( 10, 79 )
assert( [2] )
copy_code( 10, 97, 1 )
// Nothing here originally
[2] = get_cap()
print( "cap =" )
print( [2] )
[2] = get_max_cap()
print( "mxcap" )
print( [2] )
[2] = get_max_msgs()
print( "mxmsg" )
print( [2] )
[2] = get_sense_range()
print( "sense" )
print( [2] )
[2] = get_transmit_range()
print( "trans" )
print( [2] )
[2] = get_broadcast_range()
print( "bdcst" )
print( [2] )
[2] = get_blueprint_count()
print( "bpo")
print( [2] )
[2] = get_line_count()
print( "lines" )
print( [2] )
sense( 1 )
[2] = get_sense_result_count()
print( "sense" )
print( [2] )
[2] = get_sense_result_type(0)
print( "type" )
print( [2] )
[2] = get_sense_result_location(0)
print( [2] )
[3] = is_location(2)
assert( [3] )
[3] = can_build(0)
goto 140
synch( 100 )
advance(1)                              // 1
turn( 1, 1 )                            // 2
build( 0, 1, 5 )                        // 3
turn( 0, 1 )                            // 4
build( 0, 135, 5 )
sense( 1 )
[2] = get_sense_result_location(1)
[3] = get_cargohold_count_of(0)
[4] = get_cargohold_count_of(1)
[5] = get_cargohold_count_of(2)
[6] = get_cargohold_count_of(3)
[7] = get_cargohold_count_of(4)
[8] = get_cargohold_count_of(5)
[9] = get_cargohold_count_of(6)
[10] = get_cargohold_count_of(7)
[7] /= 2
[8] /= 2
[9] /= 2
[10] /= 2
give_cargo_to( [2], 0, [3] )
give_cargo_to( [2], 1, [4] )
give_cargo_to( [2], 2, [5] )
give_cargo_to( [2], 3, [6] )
give_cargo_to( [2], 4, [7] )
give_cargo_to( [2], 5, [8] )
give_cargo_to( [2], 6, [9] )
give_cargo_to( [2], 7, [10] )
turn( 3, 1 )
build( 0, 163, 1 )
turn( 1, 1 )
advance( 2 )
turn( 0, 3 )
print("AIM")
sense( 3 )
[2] = get_sense_result_count()
[3] = get_sense_result_location(1)
[4] = can_aim_at([3])
[5] = can_fire_at([3])
aim_at([3])
fire_at([3])




print( "DONE" )
goto 180